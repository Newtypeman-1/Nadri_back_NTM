<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.iei.plan.model.dao.PlanDao">

	<select id="verifyPlan" resultType="plan">
		SELECT
			tp.*,
			CASE
				WHEN pb.plan_no IS NOT NULL THEN 1
				ELSE 0
			END AS bookmarked
		FROM
			trip_plan tp
		LEFT JOIN
			plan_bookmark pb ON (
				tp.plan_no = pb.plan_no
				AND
				pb.member_nickname = #{loginNickname}
			)
		WHERE
			tp.plan_no = #{planNo}
			AND (
				tp.plan_status = 1
				OR
				tp.member_nickname = #{loginNickname}
			)
	</select>
	<select id="isPlanOwner" resultType="int">
		SELECT COUNT(*)
		FROM trip_plan tp
		WHERE
			tp.plan_no = #{planNo}
			AND
			tp.member_nickname = #{loginNickname}
	</select>
	
	<insert id="insertTripPlan">
		INSERT INTO trip_plan
		VALUES (
			#{planNo},
			#{planName},
			#{startDate},
			#{endDate},
			#{planThumb},
			#{planStatus},
			#{memberNickname}
		)
		<selectKey order="BEFORE" resultType="int" keyProperty="planNo">
			select trip_plan_seq.nextval from dual
		</selectKey>
	</insert>
	<select id="selectPlanItinerariesWithPlace" resultType="itineraryWithPlace">
		SELECT 
			i.itinerary_date,
			i.transport,
			i.itinerary_order,
	
			p.place_id,
			p.place_title,
			p.place_addr,
			p.place_type_id,
			p.map_lat,
			p.map_lng,
			p.place_thumb,
	
			NVL(r.avg_rate, 0) AS place_rating,
			NVL(r.review_count, 0) AS place_review
	
		FROM trip_itinerary i
		JOIN place_info p ON i.end_location = p.place_id
		LEFT JOIN (
			SELECT 
				place_id, 
				AVG(star_rate) AS avg_rate, 
				COUNT(review_no) AS review_count
			FROM review
			GROUP BY place_id
		) r ON p.place_id = r.place_id
	
		WHERE i.plan_no = #{planNo}
		ORDER BY i.itinerary_order
	</select>
	
	<select id="currentPlanNo" resultType="int">
		SELECT trip_plan_seq.currval FROM dual
	</select>
	
	<insert id="insertTripItinerary">
		INSERT INTO trip_itinerary
		VALUES (
			trip_itinerary_seq.nextval,
			#{planNo},
			#{itineraryDate},
			<choose>
				<when test="startLocation != 0">
					#{startLocation},
				</when>
				<when test="startLocation == 0">
					null,
				</when>
			</choose>
			#{transport},
			#{endLocation},
			#{itineraryOrder}
		)
	</insert>
	
	<select id="selectPlanStats" resultType="stats">
		select count(*) planCount
		from trip_plan	
	</select>
	
	<select id="selectMostPlace" resultType="place">
		select top.place_id, top.visit_count, p.place_type_id, p.place_title, p.place_addr   from
		    (select r.* from 
		        (select t.*, rownum rnum from
		        (select end_location place_id, count(end_location) as visit_count
		            from TRIP_ITINERARY 
		            group by end_location 
		            order by visit_count desc) t)r 
		    where r.rnum &lt;= 10) top
		left join place_info p on(top.place_id=p.place_id)
	</select>
	
	<select id="selectOnePlan" resultType="plan">
		SELECT * FROM trip_plan WHERE plan_no = #{planNo}
	</select>
	
	<update id="updatePlan">
		UPDATE trip_plan
	    SET plan_name = #{planName},
	        start_date = #{startDate},
	        end_date = #{endDate},
	        plan_thumb = #{planThumb},
	        plan_status = #{planStatus}
	    WHERE plan_no = #{planNo}
	</update>
	
	<delete id="deleteItineraries">
		DELETE FROM trip_itinerary
		WHERE plan_no = #{planNo}
	</delete>
	
	<select id="selectPagedNearby" resultType="place">
		SELECT * FROM (
			SELECT ROWNUM AS rnum, sub.* FROM (
				SELECT
					p.place_id, p.place_thumb, p.place_title, p.place_type_id, p.place_addr,
					p.map_lat, p.map_lng,
					NVL(r.avg_rate, 0) AS place_rating,
					NVL(r.review_count, 0) AS place_review,
					CASE
						WHEN b.place_id IS NOT NULL THEN 1 ELSE 0
					END AS bookmarked
				FROM place_info p
				LEFT JOIN (
					SELECT place_id, AVG(star_rate) AS avg_rate, COUNT(*) AS review_count
					FROM review
					GROUP BY place_id
				) r ON p.place_id = r.place_id
				LEFT JOIN bookmark b
					ON p.place_id = b.place_id AND b.member_nickname = #{memberNickname}
				WHERE
					p.map_lat BETWEEN #{lat} - #{height} / 2.0 AND #{lat} + #{height} / 2.0
					AND
					p.map_lng BETWEEN #{lng} - #{width} / 2.0 AND #{lng} + #{width} / 2.0
					<choose>
						<when test="filterOption == 32 or filterOption == 39 or filterOption == 12">
							AND p.place_type_id = #{filterOption}
						</when>
						<when test="filterOption == 0">
							AND p.place_type_id NOT IN (32, 39, 12)
						</when>
					</choose>
				<choose>
					<when test="sortOption == 1">
						ORDER BY 6371000 * ACOS(
							COS(#{lat} * 3.141592 / 180) * COS(p.map_lat * 3.141592 / 180) *
							COS((p.map_lng - #{lng}) * 3.141592 / 180) +
							SIN(#{lat} * 3.141592 / 180) * SIN(p.map_lat * 3.141592 / 180)
						)
					</when>
					<when test="sortOption == 2">
						ORDER BY place_review DESC
					</when>
					<when test="sortOption == 3">
						ORDER BY p.place_title ASC
					</when>
				</choose>
			) sub
			WHERE ROWNUM &lt;= #{start} + #{size}
		)
		WHERE rnum &gt; #{start}
	</select>
	<select id="countNearby" resultType="int">
		SELECT COUNT(*)
		FROM place_info p
		WHERE
			p.map_lat BETWEEN #{lat} - #{height} / 2.0 AND #{lat} + #{height} / 2.0
			AND
			p.map_lng BETWEEN #{lng} - #{width} / 2.0 AND #{lng} + #{width} / 2.0
			<if test="filterOption != null">
				AND p.place_type_id = #{filterOption}
			</if>
	</select>
	
	<select id="checkBookmark" resultType="int">
		SELECT COUNT(*) FROM plan_bookmark
		WHERE plan_no = #{planNo} AND member_nickname = #{memberNickname}
	</select>
	<delete id="deleteBookmark">
		DELETE FROM plan_bookmark
		WHERE plan_no = #{planNo} AND member_nickname = #{memberNickname}
	</delete>
	<insert id="insertBookmark">
		INSERT INTO plan_bookmark
    	VALUES (#{planNo}, #{memberNickname})
	</insert>
	
	<select id="selectPlanList" resultType="plan">
	  SELECT * FROM (
	    SELECT ROWNUM AS rn, inner_query.*
	    FROM (
	      SELECT 
	        tp.*, 
	        NVL(pb.bookmark_count, 0) AS bookmark_count,
	        CASE 
	          WHEN pb2.plan_no IS NOT NULL THEN 1 
	          ELSE 0 
	        END AS bookmarked
	      FROM trip_plan tp
	
	      <!-- 전체 북마크 수 계산 -->
	      LEFT JOIN (
	        SELECT plan_no, COUNT(*) AS bookmark_count
	        FROM plan_bookmark
	        GROUP BY plan_no
	      ) pb ON tp.plan_no = pb.plan_no
	
	      <!-- 로그인 유저의 북마크 여부 확인 -->
	      LEFT JOIN (
	        SELECT plan_no
	        FROM plan_bookmark
	        WHERE member_nickname = #{loginNickname}
	      ) pb2 ON tp.plan_no = pb2.plan_no
	
	      <where>
	        <!-- 기본은 공개 플랜만 조회 -->
	        <if test="memberNickname == null">
	          tp.plan_status = 1
	        </if>
	
	        <!-- 내가 작성한 플랜 조회 시 비공개도 포함 -->
	        <if test="memberNickname != null and memberNickname != ''">
	          tp.member_nickname = #{memberNickname}
	          AND tp.plan_status IN (1, 2)
	        </if>
	
	        <!-- 북마크 필터 (내가 즐겨찾기한 플랜만) -->
	        <if test="isBookmark == true">
	          AND pb2.plan_no IS NOT NULL
	        </if>
	
	        <!-- 특정 플랜 번호로 필터링 -->
	        <if test="id != null and id.length > 0">
	          AND tp.plan_no IN
	          <foreach item="item" collection="id" open="(" separator="," close=")">
	            #{item}
	          </foreach>
	        </if>
	      </where>
	
	      ORDER BY
	      <choose>
	        <when test="order == null">
	          tp.plan_no DESC
	        </when>
	        <when test="order == 1">
	          bookmark_count DESC
	        </when>
	        <otherwise>
	          tp.plan_no DESC
	        </otherwise>
	      </choose>
	
	    ) inner_query
	    WHERE ROWNUM &lt; #{end}
	  )
	  WHERE rn &gt;= #{start}
	</select>
	
	<delete id="deletePlan">
		DELETE FROM trip_plan
		WHERE
			plan_no = #{planNo}
			AND
			member_nickname = #{memberNickname}
	</delete>
	
<!--
	<select id="selectTripItineraries" resultType="itinerary">
	</select>
	<insert id="copyPlan">
	</insert>
-->
	
</mapper>
